AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template - DynamoDB table + Lambda (stream trigger + http endpoint)
Parameters:
  JwtSecretParam:
    Type: String
    Description: JWT secret value (use SSM SecureString name or pass the raw secret).
Globals:
  Function:
    Runtime: nodejs20.x
    Timeout: 30
    Environment:
      Variables:
        TABLE_NAME:
          Ref: ProductsTable
        DYNAMODB_TABLE:
          Ref: ProductsTable
Resources:
  ProductsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-Products
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-Users
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      BillingMode: PAY_PER_REQUEST
  ProductsProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-ProductsProcessor
      Handler: streamHandler.handler
      CodeUri: ProductsProcessorFunction
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ProductsTable
      - Statement:
        - Effect: Allow
          Action: sns:Publish
          Resource:
            Ref: NotificationTopic
      Environment:
        Variables:
          NOTIFICATION_TOPIC_ARN:
            Ref: NotificationTopic
          USERS_TABLE:
            Ref: UsersTable
          JWT_SECRET:
            Ref: JwtSecretParam
      Events:
        ProductsStream:
          Type: DynamoDB
          Properties:
            Stream:
              Fn::GetAtt:
              - ProductsTable
              - StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 100
        ProductsApi:
          Type: Api
          Properties:
            Path: /Product
            Method: post
    Metadata:
      SamResourceId: ProductsProcessorFunction
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-Api
      Handler: lambda/apiHandler.handler
      CodeUri: ApiFunction
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: ProductsTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: UsersTable
      - Statement:
        - Effect: Allow
          Action: sns:Publish
          Resource:
            Ref: NotificationTopic
      Environment:
        Variables:
          USERS_TABLE:
            Ref: UsersTable
          JWT_SECRET:
            Ref: JwtSecretParam
      Events:
        ProxyApi:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
    Metadata:
      SamResourceId: ApiFunction
  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName:
        Fn::Sub: ${AWS::StackName}-ProductNotifications
  NotificationSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      Endpoint: jonathanbimbati@gmail.com
      TopicArn:
        Ref: NotificationTopic
  NotificationConsumerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        Fn::Sub: ${AWS::StackName}-NotificationConsumer
      Handler: lambda/notificationHandler.handler
      CodeUri: NotificationConsumerFunction
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource: '*'
    Metadata:
      SamResourceId: NotificationConsumerFunction
  NotificationLambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: lambda
      Endpoint:
        Fn::GetAtt:
        - NotificationConsumerFunction
        - Arn
      TopicArn:
        Ref: NotificationTopic
  NotificationLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
        - NotificationConsumerFunction
        - Arn
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: NotificationTopic
Outputs:
  ProductsTableName:
    Description: DynamoDB table name
    Value:
      Ref: ProductsTable
  ProductsProcessorFunctionArn:
    Description: Lambda function ARN
    Value:
      Fn::GetAtt:
      - ProductsProcessorFunction
      - Arn
  ProductsApiEndpoint:
    Description: API endpoint for manual invocation (POST /Product)
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/Product
  ApiBaseEndpoint:
    Description: API base endpoint (use /Prod/api/... for auth/product routes)
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod
  NotificationTopicArn:
    Description: SNS topic ARN for product notifications
    Value:
      Ref: NotificationTopic
