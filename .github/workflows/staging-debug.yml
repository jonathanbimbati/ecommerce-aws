name: Staging debug pipeline

on:
  workflow_dispatch: {}
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  debug-pods:
    name: Debug staging pods
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Configure kubeconfig from secret
        shell: bash
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
        run: |
          if [ -n "$KUBE_CONFIG" ]; then
            echo "$KUBE_CONFIG" | base64 --decode > "$GITHUB_WORKSPACE/kubeconfig"
            # normalize exec plugin apiVersion and add interactiveMode: Never when needed
            sed -E -i 's/client.authentication\.kxs\.io/client.authentication.k8s.io/g' "$GITHUB_WORKSPACE/kubeconfig" || true
            sed -E -i 's/client.authentication.k8s.io\/v[0-9a-zA-Z._-]*/client.authentication.k8s.io\/v1/g' "$GITHUB_WORKSPACE/kubeconfig" || true
            # Safely insert `interactiveMode: Never` after any `exec:` mapping line using Python
            python3 - <<'PY'
            import os, re
            kp = os.path.join(os.environ.get('GITHUB_WORKSPACE','.'), 'kubeconfig')
            try:
                with open(kp, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
            except Exception:
                lines = []
            out = []
            exec_re = re.compile(r'^\s*exec:\s*$')
            i = 0
            while i < len(lines):
                out.append(lines[i])
                if exec_re.match(lines[i]):
                    # peek next line to detect indentation for the following block
                    if i+1 < len(lines):
                        m = re.match(r'^(\s*)', lines[i+1])
                        indent = m.group(1) if m else ''
                        out.append(indent + '  interactiveMode: Never\n')
                i += 1
            with open(kp, 'w', encoding='utf-8') as f:
                f.writelines(out)
            PY
            echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> "$GITHUB_ENV"
            else
            echo "KUBE_CONFIG secret is empty. Exiting debug to avoid accidental cluster access.";
            exit 1
          fi

      - name: Configure AWS credentials for kubeconfig exec-plugin
        if: ${{ env.AWS_ACCESS_KEY_ID != '' }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Refresh kubeconfig via AWS (ensure exec-plugin uses job credentials)
        if: ${{ env.AWS_ACCESS_KEY_ID != '' && env.EKS_CLUSTER_NAME != '' }}
        run: |
          echo "Refreshing kubeconfig using AWS CLI so exec-plugin picks up credentials"
          aws sts get-caller-identity || true
          aws eks update-kubeconfig --name "$EKS_CLUSTER_NAME" --region "$AWS_REGION" --kubeconfig $GITHUB_WORKSPACE/kubeconfig
          echo "KUBECONFIG=$GITHUB_WORKSPACE/kubeconfig" >> $GITHUB_ENV

      - name: Show cluster and namespace info
        run: |
          echo "KUBECONFIG=$KUBECONFIG"
          kubectl version --client
          kubectl get namespaces || true

      - name: Get pods in staging
        run: |
          kubectl get pods -n staging -o wide || true

      - name: Describe pods (with events)
        run: |
          kubectl describe pods -n staging --show-events || true

      - name: Dump logs for non-ready containers (last 200 lines)
        shell: bash
        run: |
          set -e
          echo "Looking for non-ready pods..."
          mapfile -t pods < <(kubectl get pods -n staging --no-headers -o custom-columns=NAME:.metadata.name,READY:.status.containerStatuses[*].ready | awk '$2 !~ /true/ { print $1 }') || true
          if [ ${#pods[@]} -eq 0 ]; then
            echo "No non-ready pods found. Exiting."
            exit 0
          fi
          for p in "${pods[@]}"; do
            echo "--- Pod: $p ---"
            # list containers in pod
            containers=$(kubectl get pod "$p" -n staging -o jsonpath='{.spec.containers[*].name}') || true
            for c in $containers; do
              echo "--- Logs for pod/$p container/$c ---"
              kubectl logs "$p" -n staging -c "$c" --tail=200 || true
            done
            echo "--- End pod: $p ---"
          done

      - name: Fetch recent events for staging namespace
        run: |
          kubectl get events -n staging --sort-by='.lastTimestamp' || true

      - name: Finished
        run: echo "Staging debug completed. Look at logs above for failures or ImagePull events."
