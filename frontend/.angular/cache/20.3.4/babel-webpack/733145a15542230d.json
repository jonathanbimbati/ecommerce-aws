{"ast":null,"code":"import _asyncToGenerator from \"C:/projetos/ecommerce-aws/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { firstValueFrom } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _staticBlock;\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.tokenKey = 'ecom_token';\n    }\n    login(username, password) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        // Try backend login\n        try {\n          const obs = _this.http.post('/api/auth/login', {\n            username,\n            password\n          });\n          const res = yield firstValueFrom(obs);\n          if (res && res.token) {\n            localStorage.setItem(_this.tokenKey, res.token);\n            return true;\n          }\n        } catch (err) {\n          // fallback to local stub (for dev when backend isn't available)\n          console.warn('Backend login failed, falling back to local stub', err);\n          if (username && password) {\n            const token = btoa(`${username}:${password}`);\n            localStorage.setItem(_this.tokenKey, token);\n            return true;\n          }\n        }\n        return false;\n      })();\n    }\n    register(username, password, name) {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const obs = _this2.http.post('/api/auth/register', {\n            username,\n            password,\n            name\n          });\n          const res = yield firstValueFrom(obs);\n          if (res && res.token) {\n            localStorage.setItem(_this2.tokenKey, res.token);\n            return true;\n          }\n        } catch (err) {\n          console.error('Registration failed', err);\n        }\n        return false;\n      })();\n    }\n    logout() {\n      localStorage.removeItem(this.tokenKey);\n    }\n    isAuthenticated() {\n      return !!localStorage.getItem(this.tokenKey);\n    }\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n    static #_ = _staticBlock = () => (this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    }, this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    }));\n  }\n  _staticBlock();\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}