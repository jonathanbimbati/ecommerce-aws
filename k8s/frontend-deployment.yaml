apiVersion: v1
kind: Service
metadata:
  name: ecommerce-frontend
  labels:
    app: ecommerce-frontend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: "Name=ecommerce-aws-ibm,Project=ecommerce-aws,Component=frontend"
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app: ecommerce-frontend
  type: LoadBalancer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ecommerce-frontend
  labels:
    app: ecommerce-frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ecommerce-frontend
  template:
    metadata:
      labels:
        app: ecommerce-frontend
    spec:
      containers:
        - name: frontend
          image: 199299155478.dkr.ecr.us-east-1.amazonaws.com/ecommerce-ecr-frontend:latest
          # Use Always so CI can reliably force pods to pull the newly-built image when we update
          # the deployment (for example via `kubectl set image` + rollout restart). This avoids
          # cases where an older image with a stale nginx config is already present on the node
          # and would be used because of IfNotPresent.
          imagePullPolicy: Always
          env:
            - name: API_URL
              value: ""
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 20
            periodSeconds: 20
          resources:
            limits:
              cpu: "500m"
              memory: "256Mi"
            requests:
              cpu: "50m"
              memory: "64Mi"